/*!
 * @file PMT.h
 * @brief Geometry/electronics of the photomultiplier tubes.
 * @author Segev BenZvi
 * @version $Id: PMT.h 28837 2016-01-12 20:47:28Z sybenzvi $
 */

#ifndef DATACLASSES_DETECTOR_PMT_H_INCLUDED
#define DATACLASSES_DETECTOR_PMT_H_INCLUDED

#include <data-structures/math/TabulatedFunction.h>

#include <data-structures/detector/DetectorComponentEnums.h>

#include <hawcnest/PointerTypedefs.h>

#include <string>

namespace det {

  typedef unsigned short IdType;

  /**
   * @class PMT
   * @author Segev BenZvi
   * @date 24 Dec 2010
   * @ingroup detector_props
   * @brief Photomultiplier tube (PMT) physical properties
   *
   * This class stores the geometrical and electronic properties of the PMTs
   * used in HAWC.  A PMT has a unique ID number and response values, such as
   * gain and QE.  PMTs are plugged into Channels.
   *
   * The model of the PMT response to a single PE is a short linear response
   * followed by a Gaussian of width s1 before the signal peak and then a
   * second Gaussian of width s2 after the peak.  This choice is based on the
   * study of R5912 PMTs by Bob Ellsworth.  See
   * http://umdgrb.umd.edu/~ellswort/totsim/ for details.
   *
   * Note that s1 and s2 are average properties; there is some variation for
   * individual PE pulses.  The variation is characterized by a "precision"
   * value.
   */
  class PMT {

    public:

      PMT(const PMTType& pmtType = R5912);

      virtual ~PMT() { }

      /// Global channel ID (like Milagro "igrid")
      const IdType& GetPMTId() const { return pmtId_; }

      /// PMT Type (e.g. Milagro R5912)
      const PMTType& GetPMTType() const { return pmtType_; }

      /// PMT glass envelope diameter
      double GetDiameter() const { return diameter_; }

      /// PMT photocathode effective diameter
      double GetCathodeDiameter() const { return cathDiameter_; }

      /// Diameter of the Milagro watertight base
      double GetBaseDiameter() const { return baseDiameter_; }

      /// Height of the Milagro watertight base
      double GetBaseHeight() const { return baseHeight_; }

      /// PMT quantum efficiency at a given wavelength
      double GetQuantumEfficiency(const double lambda) const
      { return qeVsLambda_->Evaluate(lambda); }

      /// PMT gain (PE/charge ratio after last dynode)
      double GetPMTGain() const { return gain_; }

      /// PMT gain (PE/charge ratio after last dynode)
      double GetPMTGainPrecision() const { return gainErr_; }

      /// Amplitude of the signal generated by a single PE (voltage units)
      double GetPEAmplitude() const { return ampl_; }

      /// Width of rising part of the PMT pulse (time units)
      double GetSigma1() const { return sig1_; }

      /// Width of falling part of the PMT pulse (time units)
      double GetSigma2() const { return sig2_; }

      /// Random percent fluctuations of the widths of a given pulse
      double GetWidthPrecision() const { return sigErr_; }

      /// Output impedance of the PMT base
      double GetImpedance() const { return Zout_; }

      /// Get charge factor such that Charge * charge factor is the
      /// equivalent charge that would be observed by R5912.
      double GetChargeFactor() const { return chargeFactor_; }

    private:

      void InitializeProperties();

      // Physical properties
      IdType pmtId_;            ///< PMT serial number (HAWC numbering scheme)
      PMTType pmtType_;         ///< PMT Type (e.g. R5912, R7081HQE, R12199, ..)
      double diameter_;         ///< Glass envelope diameter
      double cathDiameter_;     ///< Effective diameter of the photocathode
      double baseDiameter_;     ///< Diameter of the PMT base
      double baseHeight_;       ///< Height of the PMT base

      // Electronics properties
      double gain_;             ///< PMT gain (PE/charge ratio at last dynode)
      double gainErr_;          ///< Per-pulse gain fluctuation (percent)
      double ampl_;             ///< Amplitude of a single PE (voltage units)
      double sig1_;             ///< Signal rising Gaussian width (time units)
      double sig2_;             ///< Signal falling Gaussian width (time units)
      double sigErr_;           ///< Per-pulse width fluctuation (percent)
      double Zout_;             ///< Output impedance of the PMT base

      /// Charge * chargeFactor_ is the equivalent charge that would be
      /// observed by a R5912 given a Cherenkov spectrum.
      /// So smaller chargeFactor_ --> more sensitive PMT.
      double chargeFactor_;

      /// Quantum efficiency (photon/PE ratio at photocathode) vs wavelength.
      /// Declared static for now because all tubes of a given type are
      /// assumed identical.
      /// @todo Move this to a configuration file
      static TabulatedFunction<float> qeVsLambdaR5912_;
      static TabulatedFunction<float> qeVsLambdaR7081HQE_;
      static TabulatedFunction<float> qeVsLambdaR12199_;

      TabulatedFunction<float>* qeVsLambda_;

  };

  SHARED_POINTER_TYPEDEFS(PMT);

}

#endif // DATACLASSES_DETECTOR_PMT_H_INCLUDED

