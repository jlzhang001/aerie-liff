/*!
 * @file PointSource.h
 * @brief Access to properties of point sources
 * @author Segev BenZvi
 * @date 26 May 2011
 * @version $Id: PointSource.h 23950 2015-02-05 21:04:49Z sybenzvi $
 */

#ifndef GRMODEL_SERVICES_SPECTRA_POINTSOURCE_H_INCLUDED
#define GRMODEL_SERVICES_SPECTRA_POINTSOURCE_H_INCLUDED

#include <data-structures/astronomy/EquPoint.h>
#include <data-structures/physics/Particle.h>
#include <data-structures/time/ModifiedJulianDate.h>

#include <rng-service/RNGService.h>

#include <grmodel-services/spectra/SourceExtent.h>
#include <grmodel-services/spectra/FluxSource.h>

class PowerLaw;

/*!
 * @class PointSource
 * @author Segev BenZvi
 * @date 26 May 2011
 * @ingroup gr_models
 * @brief Virtual base class for point sources
 *
 * A point source is just a location and a spectrum.  The spectrum is in units
 * of 1/(length<sup>2</sup> time energy) since the source has no angular
 * extent.
 */
class PointSource : public FluxSource {

  public:

    PointSource() { }

    virtual ~PointSource() { }

    /// Get the source flux at a given energy
    virtual double GetFlux(const double E, const ModifiedJulianDate& mjd) const = 0;

    /// Get the weight to convert a PowerLaw to this flux
    virtual double GetFluxWeight(const double E, const ModifiedJulianDate& mjd, const PowerLaw& p) const = 0;

    /// Minimum energy (modeled or measured) of particles from the source
    virtual double GetMinEnergy() const = 0;

    /// Maximum energy (modeled or measured) of particles from the source
    virtual double GetMaxEnergy() const = 0;

    /// Randomly sample an energy from the source spectrum in [E0, E1]
    virtual double GetRandomEnergy(const RNGService& rng,
                                   const double E0, const double E1) const = 0;

    /// Integrate the source spectrum between two energies
    virtual double Integrate(const double E0, const double E1,
                             const ModifiedJulianDate& mjd) const = 0;

    /// Get the particle type generated by the source
    const ParticleType& GetParticleType() const { return particleType_; }

    /// Get the position of the source in celestial coordinates
    const EquPoint& GetLocation() const { return sourceLoc_; }

    /// Get the extent and shape of the source (can be pointlike)
    const SourceExtent& GetSourceExtent() const { return extent_; }

    /// Get the redshift of the source
    double GetRedshift() const { return redshift_; }

  protected:

    EquPoint sourceLoc_;            ///< Location of the source in (ra,dec)
    double redshift_;               ///< Redshift of source
    SourceExtent extent_;           ///< Source extent (if not pointlike)

};

#endif // GRMODEL_SERVICES_SPECTRA_POINTSOURCE_H_INCLUDED

